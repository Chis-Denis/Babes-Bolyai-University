     1                                  bits 32 
     2                                  global start        
     3                                  
     4                                  extern exit,fopen,printf,scanf,fread,fclose,fprintf,gets          
     5                                  import exit msvcrt.dll   
     6                                  import fopen msvcrt.dll
     7                                  import printf msvcrt.dll
     8                                  import scanf msvcrt.dll
     9                                  import fread msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  import gets msvcrt.dll
    13                                  
    14                                  
    15                                  
    16                                  segment data use32 class=data
    17 00000000 887766554433221111-         sir dq 1122334455667788h,99AABBCCDDEEFF11h,0xFF00000000000055,0xFFFEFFFFFFFFEFFF,0x450000AB000000AB,0x11113733555577AB
    17 00000009 FFEEDDCCBBAA995500-
    17 00000012 0000000000FFFFEFFF-
    17 0000001B FFFFFFFEFFAB000000-
    17 00000024 AB000045AB77555533-
    17 0000002D 371111             
    18                                      len equ ($-sir) ; we want the len in bytes 
    19 00000030 00000000                    n dd 0
    20 00000034 256400                      n_format db "%d",0
    21 00000037 00<rept>                    sir_nou times 100 db 0
    22 0000009B 00000000                    sir_nou_len dd 0
    23 0000009F 00000000                    second_for_len dd 0
    24 000000A3 00                          print_len db 0
    25 000000A4 00                          first_byte_0 db 0
    26 000000A5 00                          second_byte_0 db 0
    27 000000A6 2000                        space db " ",0
    28 000000A8 255800                      hexa_format db "%X",0
    29 000000AB 257300                      string_format db "%s",0
    30                                  
    31                                      
    32                                  segment code use32 class=code
    33                                      start:
    34 00000000 68[30000000]                    push dword n
    35 00000005 68[34000000]                    push dword n_format
    36 0000000A FF15[00000000]                  call [scanf]
    37 00000010 83C408                          add esp, 4*2
    38                                          
    39 00000013 A1[30000000]                    mov eax, dword [n]
    40 00000018 83F806                          cmp eax,6
    41 0000001B 0F871D010000                    ja not_in_range
    42                                          
    43 00000021 83F801                          cmp eax,1
    44 00000024 0F8214010000                    jb not_in_range
    45                                                
    46                                          
    47 0000002A BE[00000000]                    mov esi,sir
    48 0000002F BF[37000000]                    mov edi,sir_nou
    49                                          
    50                                        
    51 00000034 BB00000000                      mov ebx,0
    52 00000039 B930000000                      mov ecx,len
    53                                          transfer:
    54 0000003E A4                                  movsb 
    55                                  
    56 0000003F 43                                  inc ebx
    57 00000040 8B15[30000000]                      mov edx,dword [n]
    58 00000046 4A                                  dec edx
    59                                              
    60 00000047 83F900                              cmp ecx,0
    61 0000004A 7411                                je afara
    62                                              
    63                                              count:
    64 0000004C AC                                      lodsb
    65 0000004D 4A                                      dec edx
    66 0000004E 49                                      dec ecx
    67 0000004F 83F900                                  cmp ecx,0
    68 00000052 7409                                    je afara
    69 00000054 83FA00                                  cmp edx,0
    70 00000057 7402                                    je continua_loop
    71 00000059 EBF1                                    jmp count
    72                                                  
    73                                          continua_loop:
    74 0000005B E2E1                            loop transfer
    75                                          
    76                                          afara:
    77 0000005D 891D[9B000000]                  mov dword [sir_nou_len],ebx ; lungimea sirului trb sa fie cu 1 mai mica ca sa putem face bubble sort
    78 00000063 891D[9F000000]                  mov dword [second_for_len],ebx
    79 00000069 891D[A3000000]                  mov dword [print_len],ebx
    80                                     
    81                                          
    82                                          
    83                                          ; so far we have transfered the bytes from one register to another
    84                                          
    85                                          
    86                                          oloop:
    87 0000006F 8B0D[9F000000]                      mov ecx, dword [second_for_len]
    88 00000075 BE[37000000]                        mov esi, sir_nou
    89                                  
    90                                                  iloop:
    91 0000007A 8A06                                        mov al, [esi]
    92 0000007C B300                                        mov bl,0 ; in bl we coun the bits
    93                                                      
    94 0000007E D0E8                                        shr al,1
    95 00000080 80D300                                      adc bl,0
    96 00000083 D0E8                                        shr al,1
    97 00000085 80D300                                      adc bl,0
    98 00000088 D0E8                                        shr al,1
    99 0000008A 80D300                                      adc bl,0
   100 0000008D D0E8                                        shr al,1
   101 0000008F 80D300                                      adc bl,0
   102 00000092 D0E8                                        shr al,1
   103 00000094 80D300                                      adc bl,0
   104 00000097 D0E8                                        shr al,1
   105 00000099 80D300                                      adc bl,0
   106 0000009C D0E8                                        shr al,1
   107 0000009E 80D300                                      adc bl,0
   108 000000A1 D0E8                                        shr al,1
   109 000000A3 80D300                                      adc bl,0
   110                                                      
   111 000000A6 881D[A4000000]                              mov byte [first_byte_0],bl
   112                                                      
   113 000000AC 8A4601                                      mov al, [esi+1]
   114 000000AF B300                                        mov bl,0 ; in bl we coun the bits
   115                                                      
   116 000000B1 D0E8                                        shr al,1
   117 000000B3 80D300                                      adc bl,0
   118 000000B6 D0E8                                        shr al,1
   119 000000B8 80D300                                      adc bl,0
   120 000000BB D0E8                                        shr al,1
   121 000000BD 80D300                                      adc bl,0
   122 000000C0 D0E8                                        shr al,1
   123 000000C2 80D300                                      adc bl,0
   124 000000C5 D0E8                                        shr al,1
   125 000000C7 80D300                                      adc bl,0
   126 000000CA D0E8                                        shr al,1
   127 000000CC 80D300                                      adc bl,0
   128 000000CF D0E8                                        shr al,1
   129 000000D1 80D300                                      adc bl,0
   130 000000D4 D0E8                                        shr al,1
   131 000000D6 80D300                                      adc bl,0
   132                                                      
   133 000000D9 881D[A5000000]                              mov byte [second_byte_0],bl
   134                                                      
   135 000000DF A0[A4000000]                                mov al,byte [first_byte_0]
   136 000000E4 8A1D[A5000000]                              mov bl,byte [second_byte_0]
   137                                                      
   138 000000EA 38D8                                        cmp al,bl
   139                                             
   140 000000EC 7F07                                        jg common1   
   141 000000EE 8A06                                        mov al,[esi]                    
   142 000000F0 864601                                      xchg al, [esi+1]
   143 000000F3 8806                                        mov [esi], al                    
   144                                  
   145                                                      common1:
   146 000000F5 46                                              inc esi
   147 000000F6 E282                                            loop iloop
   148                                  
   149 000000F8 FF0D[9B000000]                  dec dword [sir_nou_len]
   150 000000FE 0F856BFFFFFF                    jnz oloop
   151                                          
   152 00000104 31C0                            xor eax,eax
   153 00000106 BE[37000000]                    mov esi,sir_nou
   154 0000010B 31C9                            xor ecx,ecx
   155 0000010D FE05[A3000000]                  inc byte [print_len]
   156                                               
   157                                          
   158                                          printeaza:
   159 00000113 AC                                  lodsb 
   160                                              
   161 00000114 50                                  push dword eax
   162 00000115 68[A8000000]                        push dword hexa_format
   163 0000011A FF15[00000000]                      call [printf]
   164 00000120 83C408                              add esp, 4*2
   165                                              
   166                                  
   167 00000123 68[A6000000]                        push dword space
   168 00000128 68[AB000000]                        push dword string_format
   169 0000012D FF15[00000000]                      call [printf]
   170 00000133 83C408                              add esp,4*2
   171                                              
   172 00000136 FE0D[A3000000]                      dec byte [print_len]
   173 0000013C 75D5                                jnz printeaza
   174                                              
   175                                            
   176                                          not_in_range:
   177 0000013E 6A00                            push    dword 0      
   178 00000140 FF15[00000000]                  call    [exit]       
